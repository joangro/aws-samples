Parameters:
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet to use
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key name to ssh onto the instance
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC To use in the instance
    Default: vpc-e8758e91
Resources:
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install:
            - php
            - httpd
        httpd:
          commands:
            01_update:
              command: yum update -y
            02_install_httpd:
              command: yum install httpd -y 
            03_start_httpd: 
              command: systemctl start httpd
            04_enable_httpd:
              command: systemctl enable httpd
        php:
          commands:
            01_update:
              command:  yum update -y
            02_install_php:
              command:  yum install php -y
    Properties:
      SubnetId:
        !Ref Subnet
      ImageId: ami-07d9160fa81ccffb5
      KeyName: !Ref KeyName
      InstanceType: t3.micro
      SecurityGroupIds:
      - !GetAtt SecurityGroup.GroupId
      UserData: !Base64
        Fn::Join:
           - ''
           - - |
               #!/bin/bash -xe
             - '/opt/aws/bin/cfn-init -v --stack '
             - !Ref 'AWS::StackId'
             - ' --resource Instance --configsets install --region '
             - !Ref AWS::Region
             - " && data='{\"Status\" : \"SUCCESS\",\"Reason\" : \"Configuration Complete\",\"UniqueId\" : \"$(date +%s)\"}' && echo $data > /tmp/success && sleep 30 && "
             - ' curl -T /tmp/success "'
             - !Ref WaitConditionHandle
             - '"'
    DependsOn: SecurityGroup
    #CreationPolicy:
    #  ResourceSignal:
    #    Timeout: PT15M
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCId

  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref Subnet
      SecurityGroups:
      - !Ref SecurityGroup
      Listeners:
      - LoadBalancerPort: 80
        InstancePort: 80
        Protocol: TCP
      Instances:
      - Ref: Instance
    DependsOn: Instance
# References to thhis handler give the presigned url used to send the signals using the helper function
  WaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Instance
    Properties:
      Handle:
        Ref: WaitConditionHandle
      Timeout: 600

